package md.leonis.dreambeam.statik;

import md.leonis.dreambeam.model.DiskImage;
import md.leonis.dreambeam.utils.FileUtils;
import md.leonis.dreambeam.utils.Utils;

import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

public class Storage {

    //todo may be not need
    public static final String HR = "------------------------------------------------------------------";

    // Scanned image processing
    public static DiskImage diskImage;

    public static String wizardName;    // Title, generated by Name Wizard

    // Preloaded data
    public static Map<String, DiskImage> baseFiles = new HashMap<>();
    public static Map<String, DiskImage> userFiles = new HashMap<>();
    public static Map<String, String> baseHashes; // crc32/fileName
    public static Map<String, String> userHashes = new HashMap<>(); // crc32/fileName
    public static volatile boolean baseFilesLoaded = false;
    public static volatile boolean userFilesLoaded = false;
    public static Map<String, String> baseDuplicates;
    public static Map<String, String> userDuplicates;

    public static Map<String, String> textMap;

    public static void readGamesDat(Path path) throws Exception {
        baseHashes = new HashMap<>();
        var pair = Utils.loadShortListHashes(path);
        baseHashes = pair.getLeft();
        baseDuplicates = pair.getRight();
    }

    public static void calculateBaseHashesAndSave() throws Exception {
        loadBaseFiles(true);
        FileUtils.writeToFile(FileUtils.getBaseGamesDatFile(), baseHashes.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(e -> e.getValue() + " - " + e.getKey()).toList());
    }

    public static void loadBaseFiles(boolean force) throws Exception {
        if (baseFilesLoaded && !force) {
            return;
        }
        baseFilesLoaded = false;
        baseFiles = new HashMap<>();
        baseHashes = new HashMap<>();
        baseDuplicates = new HashMap<>();
        Utils.loadFiles(FileUtils.getBaseGamesDir(), baseFiles, baseHashes, baseDuplicates);
        baseFilesLoaded = true;
    }

    public static void loadUserFiles(boolean force) throws Exception {
        if (userFilesLoaded && !force) {
            return;
        }
        userFilesLoaded = false;
        userFiles = new HashMap<>();
        userHashes = new HashMap<>();
        userDuplicates = new HashMap<>();
        Utils.loadFiles(FileUtils.getBaseGamesDir(), userFiles, userHashes, userDuplicates);
        userFilesLoaded = true;
    }

    public static int readUserFilesCount() {
        try {
            return FileUtils.getFilesCount(FileUtils.getUserDir());
        } catch (IOException e) {
            return 0;
        }
    }

    public static void loadTexts() throws Exception {
        textMap = Utils.loadTexts(FileUtils.getTextsDir());
    }

    public static void saveUserFile(String name) throws Exception {
        FileUtils.writeToFile(FileUtils.getUserFile(name), Storage.diskImage.getSaveLines());
        userFiles.put(diskImage.getCrc32(), diskImage);
        userHashes.put(diskImage.getCrc32(), name);
    }

    public static void saveUserFileToBase(String name) throws Exception {
        FileUtils.writeToFile(FileUtils.getBaseGamesFile(name), Storage.diskImage.getSaveLines());
        baseFiles.put(diskImage.getCrc32(), diskImage);
        baseHashes.put(diskImage.getCrc32(), name);
    }
}
